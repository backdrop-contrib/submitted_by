<?php
/**
 * @file
 * Take over the "Submitted By" theme function to allow different content types
 * to have different strings.
 */

define('SUBMITTED_BY_NODE_TEXT', t('Submitted by [node:author] on [node:created]'));
define('SUBMITTED_BY_COMMENT_NODE_TEXT', t('Submitted by [comment:author] on [comment:created]'));

/**
 * Implements hook_node_type_load().
 */
function submitted_by_node_type_load(&$types) {
  // Unfortunately we can't get a list of view modes here (without causing a
  // recursion loop) so we just set a string value for the default node pattern
  // and overwrite it later with an array of view mode patterns.
  foreach ($types as $type_name => $type) {
    $types[$type_name]->settings += array(
      'submitted_by' => SUBMITTED_BY_NODE_TEXT,
      'submitted_by_comment' => SUBMITTED_BY_COMMENT_NODE_TEXT,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form.
 *
 * Add the pattern field to the node edit form.
 */
function submitted_by_form_node_type_form_alter(&$form, &$form_state) {
  $node_type = $form['#node_type'];
  $entity_info = entity_get_info('node');

  $form['display']['submitted_by'] = array(
    '#type' => 'container',
    '#states' => array(
      'invisible' => array(
        'input[name="node_submitted"]' => array('checked' => FALSE),
      ),
    ),
  );
  foreach ($entity_info['view modes'] as $mode => $info) {
    $form['display']['submitted_by']["submitted_by_$mode"] = array(
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#title' => t("Byline text - @mode view mode", array('@mode' => $info['label'])),
      '#default_value' => is_array($node_type->settings['submitted_by']) ? $node_type->settings['submitted_by'][$mode] : $node_type->settings['submitted_by'],
      '#description' => t('When a node is displayed in the "@mode" view mode, the text in this box will be used to override the normal byline attribution and date-posted text.', array('@mode' => $info['label'])),
      '#element_validate' => array('token_element_validate'),
      '#token_types' => array('node'),
    );
  }
  $form['display']['submitted_by']['token_help'] = array(
    '#theme' => 'token_tree_link',
    '#token_types' => array('node'),
    '#global_types' => TRUE,
    '#click_insert' => TRUE,
  );

  if (isset($form['comment'])) {
    $form['comment']['submitted_by'] = array(
      '#type' => 'container',
    );
    $form['comment']['submitted_by']['submitted_by_comment'] = array(
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#title' => t("Byline text"),
      '#default_value' => $node_type->settings['submitted_by_comment'],
      '#description' => t('When a comment is displayed, text in this box will be used to override the normal byline attribution and date-posted text.'),
      '#element_validate' => array('token_element_validate'),
      '#token_types' => array('comment'),
    );
    $form['comment']['submitted_by']['token_help'] = array(
    '#theme' => 'token_tree_link',
    '#token_types' => array('comment'),
    '#global_types' => TRUE,
    '#click_insert' => TRUE,
    );
  }
  // Provide a custom submit handler.
  $form['#submit'][] = 'submitted_by_node_form_submit';
}

/**
 * Custom submission handler to aggregate the patterns into an array.
 */
function submitted_by_node_form_submit($form, &$form_state) {
  $strings = array();
  $entity_info = entity_get_info('node');

  // Get view mode patterns.
  foreach ($entity_info['view modes'] as $mode => $info) {
    $strings[$mode] = $form_state['values']["submitted_by_$mode"];
  }

  // Save the settings.
  $node_type = node_type_load($form_state['values']['type']);
  $node_type->settings = array_merge($node_type->settings, array('submitted_by' => $strings));
  node_type_save($node_type);
}

/**
 * Implements hook_field_extra_fields().
 *
 * Adds a Submitted By field to the Manage Display page for each content type
 * for which it is enabled.
 */
function submitted_by_field_extra_fields() {
  $extra = array();

  $field = array(
    'display' => array(
      'submitted_by' => array(
        'label' => t('Submitted by'),
        'description' => t('Submitted By information.'),
        'weight' => 0,
      ),
    ),
  );

  foreach (node_type_get_types() as $type) {
    if (is_array($type->settings['submitted_by'])) {
      $extra['node'][$type->type] = $field;
    }
    if (module_exists('comment') && $type->settings['submitted_by_comment']) {
      $extra['comment']['comment_node_' . $type->type] = $field;
    }
  }

  return $extra;
}

/**
 * Helper function to call token_replace().
 */
function submitted_by_do_replace($entity, $view_mode = '', $entity_type = 'node') {
  $output = NULL;
  $bundle= $entity->type;
  // If it's a comment we need to dig for the bundle
  if (isset($entity->node_type)) {
    $bundle = str_replace('comment_node_', '', $entity->node_type);
  }
  $config = config("node.type.$bundle");
  // Note that we do suppress un-replaced tokens.
  $options = array('clear' => TRUE);

  if ($entity_type == 'node') {
    $submitted_by = $config->get('settings.submitted_by');
    if ($submitted_by && !empty($submitted_by[$view_mode])) {
      // Translate the string, then get node tokens.
      // Note that we do not suppress un-replaced tokens.
      $output = token_replace($submitted_by[$view_mode], array('node' => $entity), $options);
    }
  }
  else {
    $submitted_by = $config->get('settings.submitted_by_comment');
    if (!empty($submitted_by)) {
      $output = token_replace($submitted_by, array('comment' => $entity), $options);
    }
  }

  return $output;
}

/**
 * Implements hook_node_view().
 */
function submitted_by_node_view($node, $view_mode, $langcode) {
  $fields = field_extra_fields_get_display('node', $node->type, $view_mode);

  if (isset($fields['submitted_by']['visible']) && $fields['submitted_by']['visible']) {
    $node->content['submitted_by'] = array(
      '#markup' => '<span class="submitted-by">' . submitted_by_do_replace($node, $view_mode) . '</span>',
    );
  }
  else {
    $node->content['submitted_by'] = array(array());
  }
}

/**
 * Implements hook_comment_view().
 */
function submitted_by_comment_view($comment, $view_mode, $langcode) {
  $fields = field_extra_fields_get_display('comment', $comment->node_type, $view_mode);
  if (isset($fields['submitted_by']['visible']) && $fields['submitted_by']['visible']) {
    $comment->content['submitted_by'] = array(
      '#markup' => '<span class="submitted-by">' . submitted_by_do_replace($comment, '', 'comment') . '</span>',
    );
  }
  else {
    $comment->content['submitted_by'] = array(array());
  }
}


/**
 * Implements hook_preprocess_node().
 *
 * Themes might override the submitted variable unconditionally.
 */
function submitted_by_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  $view_mode = $variables['view_mode'];

  // Make submitted info empty, if user is showing module's submitted
  // information.
  $fields = field_extra_fields_get_display('node', $node->type, $view_mode);

  if (isset($fields['submitted_by']['visible']) && $fields['submitted_by']['visible']) {
    $variables['display_submitted'] = FALSE;
    $variables['submitted'] = '';
  }
  else {
    $variables['submitted'] = submitted_by_do_replace($node, $variables['view_mode']);
  }
}

/**
 * Implements hook_preprocess_comment().
 *
 * Themes might override the submitted variable unconditionally.
 */
function submitted_by_preprocess_comment(&$variables) {
  $comment = $variables['elements']['#comment'];
  $view_mode = $variables['elements']['#view_mode'];

  // Make submitted info empty, if user is showing module's submitted
  // information.
  $fields = field_extra_fields_get_display('comment', $comment->node_type, $view_mode);

  if (isset($fields['submitted_by']['visible']) && $fields['submitted_by']['visible']) {
    $variables['display_submitted'] = FALSE;
    $variables['submitted'] = '';
  }
  else {
    $variables['submitted'] = submitted_by_do_replace($comment, '', 'comment');
  }
}
